<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chuva de Advérbios</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Fredoka:wght@400;500;600&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Fredoka', sans-serif;
            background: linear-gradient(to bottom, #87CEEB, #B0E0E6);
            touch-action: none;
            overflow: hidden;
        }
        .cloud { transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out; cursor: pointer; }
        .cloud:hover { transform: scale(1.05); box-shadow: 0 10px 20px rgba(0,0,0,0.2); }
        .raindrop { user-select: none; }
        #feedback { transition: opacity 0.5s ease-in-out, transform 0.5s ease-in-out; }
        .screen { min-height: 100vh; width: 100%; padding: 1rem; }
        .video-container { position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; max-width: 100%; background: #000; border-radius: 1rem; box-shadow: 0 10px 25px rgba(0,0,0,0.2); }
        .video-container iframe { position: absolute; top: 0; left: 0; width: 100%; height: 100%; }
        .loader { border: 4px solid #f3f3f3; border-top: 4px solid #3498db; border-radius: 50%; width: 30px; height: 30px; animation: spin 1s linear infinite; }
        @keyframes spin { 0% { transform: rotate(0deg); } 100% { transform: rotate(360deg); } }
        .heart { color: red; font-size: 2rem; }
    </style>
</head>
<body class="flex items-center justify-center">

    <!-- Tela de Login / Cadastro -->
    <div id="login-screen" class="screen flex items-center justify-center">
        <div class="bg-white/70 p-6 sm:p-8 rounded-2xl shadow-xl max-w-md w-full text-center">
            <div id="login-form">
                <h1 class="text-3xl sm:text-4xl font-bold text-sky-800">Acessar Jogo</h1>
                <p class="text-lg text-sky-700 mt-4">Digite seu código e senha para entrar. Se for seu primeiro acesso, crie um código e clique em "Entrar".</p>
                <input type="text" id="login-code" placeholder="Seu código (Ex.: 36123.16)" class="mt-8 w-full text-xl p-3 rounded-xl border-4 border-sky-300">
                <input type="password" id="login-password" placeholder="Sua senha" class="mt-4 w-full text-xl p-3 rounded-xl border-4 border-sky-300">
                <button id="login-button" class="mt-6 w-full bg-blue-500 text-white text-2xl font-bold py-3 rounded-xl shadow-lg hover:bg-blue-600 transition flex items-center justify-center">
                    <span class="button-text">Entrar</span>
                    <div class="loader hidden ml-3"></div>
                </button>
                <p id="login-message" class="text-red-500 mt-4 h-5"></p>
                <button id="go-to-register" class="mt-2 text-sky-600 hover:underline">Não tenho cadastro</button>
            </div>
            <div id="register-form" class="hidden">
                <h1 class="text-3xl sm:text-4xl font-bold text-sky-800">Criar Cadastro</h1>
                <p class="text-lg text-sky-700 mt-4">Preencha seus dados para criar um acesso.</p>
                <input type="text" id="register-name" placeholder="Nome Completo" class="mt-8 w-full text-xl p-3 rounded-xl border-4 border-sky-300">
                <select id="register-class" class="mt-4 w-full text-xl p-3 rounded-xl border-4 border-sky-300 bg-white">
                    <option value="">Selecione sua turma</option>
                    <option value="5º Ano A">5º Ano A</option>
                    <option value="5º Ano B">5º Ano B</option>
                </select>
                <input type="text" id="register-code" placeholder="Crie um código de acesso" class="mt-4 w-full text-xl p-3 rounded-xl border-4 border-sky-300">
                <input type="password" id="register-password" placeholder="Crie uma senha" class="mt-4 w-full text-xl p-3 rounded-xl border-4 border-sky-300">
                <button id="register-button" class="mt-6 w-full bg-green-500 text-white text-2xl font-bold py-3 rounded-xl shadow-lg hover:bg-green-600 transition flex items-center justify-center">
                    <span class="button-text">Cadastrar e Entrar</span>
                    <div class="loader hidden ml-3"></div>
                </button>
                <p id="register-message" class="text-red-500 mt-4 h-5"></p>
                <button id="back-to-login" class="mt-2 text-sky-600 hover:underline">Já tenho cadastro</button>
            </div>
        </div>
    </div>

    <!-- Tela do Vídeo -->
    <div id="video-screen" class="screen hidden flex items-center justify-center">
        <div class="bg-white/70 p-6 sm:p-8 rounded-2xl shadow-xl max-w-3xl w-full text-center">
            <h2 class="text-2xl sm:text-3xl md:text-4xl font-bold text-sky-800">Vamos aprender!</h2>
            <p class="text-base sm:text-lg text-sky-700 mt-2 mb-2">Assista ao vídeo para revisar e ganhar até 100 pontos!</p>
            <div class="mb-4 bg-white/50 rounded-full px-6 py-2 inline-block">
                <span class="text-2xl font-semibold text-sky-800">Pontos: <span class="score-display">0</span></span>
            </div>
            <div class="video-container">
                <div id="player"></div>
            </div>
            <button id="continue-btn" class="mt-8 w-full bg-green-500 text-white text-2xl sm:text-3xl font-bold py-3 sm:py-4 rounded-xl shadow-lg transition transform hover:scale-105 opacity-50 cursor-not-allowed" disabled>
                Ir para o Jogo!
            </button>
        </div>
    </div>

    <!-- Tela do Jogo -->
    <div id="game-screen" class="screen hidden w-full max-w-4xl mx-auto flex-col items-center justify-center">
        <header class="text-center mb-4 sm:mb-8">
            <div class="flex justify-between items-center w-full">
                <div id="lives-container" class="flex space-x-1"></div>
                <div class="bg-white/50 rounded-full px-4 sm:px-6 py-2">
                    <span class="text-xl sm:text-2xl font-semibold text-sky-800">Pontos: <span class="score-display">0</span></span>
                </div>
            </div>
            <h1 class="text-3xl sm:text-4xl md:text-5xl font-bold text-white mt-4" style="text-shadow: 2px 2px 4px rgba(0,0,0,0.2);">
                Olá, <span id="player-firstname"></span>!
            </h1>
            <p class="text-lg sm:text-xl text-white mt-2">Clique na nuvem correta para o advérbio.</p>
        </header>
        <main class="space-y-6 sm:space-y-8 w-full">
            <div id="adverb-container" class="h-20 sm:h-24 flex items-center justify-center">
                <div id="current-adverb" class="raindrop bg-blue-400 text-white text-xl sm:text-2xl font-bold px-6 py-3 sm:px-8 sm:py-4 rounded-full shadow-lg border-4 border-white/50"></div>
            </div>
            <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 sm:gap-6">
                <div id="tempo" class="cloud drop-zone bg-white p-4 sm:p-6 rounded-2xl shadow-xl text-center border-b-8 border-yellow-400">
                    <h2 class="text-xl sm:text-2xl font-semibold text-yellow-600">Tempo</h2>
                </div>
                <div id="lugar" class="cloud drop-zone bg-white p-4 sm:p-6 rounded-2xl shadow-xl text-center border-b-8 border-green-400">
                    <h2 class="text-xl sm:text-2xl font-semibold text-green-600">Lugar</h2>
                </div>
                <div id="modo" class="cloud drop-zone bg-white p-4 sm:p-6 rounded-2xl shadow-xl text-center border-b-8 border-pink-400">
                    <h2 class="text-xl sm:text-2xl font-semibold text-pink-600">Modo</h2>
                </div>
                <div id="intensidade" class="cloud drop-zone bg-white p-4 sm:p-6 rounded-2xl shadow-xl text-center border-b-8 border-purple-400">
                    <h2 class="text-xl sm:text-2xl font-semibold text-purple-600">Intensidade</h2>
                </div>
            </div>
        </main>
    </div>

    <!-- Tela Final (Game Over) -->
    <div id="end-screen" class="screen hidden flex items-center justify-center">
        <div class="bg-white/70 p-6 sm:p-8 rounded-2xl shadow-xl max-w-3xl w-full text-center">
            <h1 class="text-3xl sm:text-4xl font-bold text-sky-800">Fim de Jogo!</h1>
            <p id="final-message" class="text-lg text-sky-800 mt-4 font-semibold"></p>
            <div class="flex justify-around items-center my-6 text-sky-700">
                <div class="text-xl"><strong>Pontos:</strong> <span id="final-score">0</span></div>
                <div class="text-xl"><strong>Tempo:</strong> <span id="final-time">0s</span></div>
            </div>
            <h2 class="text-2xl sm:text-3xl font-bold text-sky-800 mt-6 mb-4">Ranking</h2>
            <div class="overflow-y-auto h-64 bg-white/50 rounded-lg">
                <table class="w-full text-left">
                    <thead class="bg-sky-200 sticky top-0">
                        <tr>
                            <th class="p-2">#</th>
                            <th class="p-2">Nome</th>
                            <th class="p-2">Pontos</th>
                            <th class="p-2">Tempo</th>
                        </tr>
                    </thead>
                    <tbody id="ranking-body">
                        <tr><td colspan="4" class="p-8 text-center"><div class="loader mx-auto"></div></td></tr>
                    </tbody>
                </table>
            </div>
            <button id="play-again-button" class="mt-8 w-full bg-yellow-500 text-white text-2xl sm:text-3xl font-bold py-3 rounded-xl shadow-lg hover:bg-yellow-600 transition">
                Jogar Novamente
            </button>
        </div>
    </div>

    <div id="feedback" class="fixed top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 p-6 sm:p-8 rounded-2xl text-white text-2xl sm:text-3xl font-bold shadow-2xl opacity-0 pointer-events-none w-11/12 max-w-sm text-center"></div>
    
    <script src="https://www.youtube.com/iframe_api"></script>
    <script>
        const APPS_SCRIPT_URL = 'https://script.google.com/macros/s/AKfycbyvzdtou17UCu8lmOFg9fxVEaLg1FnWcvexCYUZzqNLcUhiE6mZW_OkxeeI874AXZRT/exec';
        const NOME_DESTE_JOGO = "Chuva de Advérbios"; // Nome do jogo para o ranking

        const loginScreen = document.getElementById('login-screen');
        const videoScreen = document.getElementById('video-screen');
        const gameScreen = document.getElementById('game-screen');
        const endScreen = document.getElementById('end-screen');
        const continueBtn = document.getElementById('continue-btn');
        const loginForm = document.getElementById('login-form');
        const loginCodeInput = document.getElementById('login-code');
        const loginPasswordInput = document.getElementById('login-password');
        const loginButton = document.getElementById('login-button');
        const loginMessage = document.getElementById('login-message');
        const goToRegisterButton = document.getElementById('go-to-register');
        const registerForm = document.getElementById('register-form');
        const registerNameInput = document.getElementById('register-name');
        const registerClassInput = document.getElementById('register-class');
        const registerCodeInput = document.getElementById('register-code');
        const registerPasswordInput = document.getElementById('register-password');
        const registerButton = document.getElementById('register-button');
        const registerMessage = document.getElementById('register-message');
        const backToLoginButton = document.getElementById('back-to-login');
        const livesContainer = document.getElementById('lives-container');
        const playerFirstNameEl = document.getElementById('player-firstname');
        const finalMessageEl = document.getElementById('final-message');

        let score = 0;
        let lives = 5;
        let timerInterval;
        let startTime;
        let loggedInUser = null;

        function showScreen(screenToShow) {
            [loginScreen, videoScreen, gameScreen, endScreen].forEach(screen => screen.classList.add('hidden'));
            screenToShow.classList.remove('hidden');
        }

        function toggleButtonLoader(button, show) {
            button.querySelector('.button-text').style.display = show ? 'none' : 'inline';
            button.querySelector('.loader').style.display = show ? 'inline-block' : 'none';
            button.disabled = show;
        }

        async function callAppsScript(action, data) {
            try {
                const response = await fetch(APPS_SCRIPT_URL, {
                    method: 'POST',
                    mode: 'cors',
                    redirect: 'follow',
                    headers: { 'Content-Type': 'text/plain;charset=utf-8', },
                    body: JSON.stringify({ action, ...data })
                });
                if (!response.ok) { throw new Error(`HTTP error! status: ${response.status}`); }
                return await response.json();
            } catch (error) {
                console.error("Erro ao contatar o Apps Script:", error);
                return { status: 'error', message: 'Falha de comunicação. Verifique a publicação do script e sua conexão.' };
            }
        }
        
        function capitalizeName(name) {
            return name.toLowerCase().split(' ').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ');
        }

        function handleSuccessfulLogin(userData) {
            const firstName = userData.name.split(' ')[0];
            loggedInUser = { ...userData, firstName };
            sessionStorage.setItem('loggedInUser', JSON.stringify(loggedInUser));
            playerFirstNameEl.textContent = firstName;
            showScreen(videoScreen);
        }

        loginButton.addEventListener('click', async () => {
            const code = loginCodeInput.value.trim();
            const password = loginPasswordInput.value.trim();
            loginMessage.textContent = '';
            if (!code || !password) {
                loginMessage.textContent = 'Preencha o código e a senha.';
                return;
            }
            toggleButtonLoader(loginButton, true);
            const result = await callAppsScript('login', { code, password });
            toggleButtonLoader(loginButton, false);
            if (result.status === 'success') {
                handleSuccessfulLogin({ name: result.name, code: code, turma: result.turma });
            } else if (result.status === 'not_found') {
                loginForm.classList.add('hidden');
                registerForm.classList.remove('hidden');
                registerCodeInput.value = code;
                registerCodeInput.removeAttribute('readonly');
            } else {
                loginMessage.textContent = result.message || 'Ocorreu um erro.';
            }
        });
        
        goToRegisterButton.addEventListener('click', () => {
            loginForm.classList.add('hidden');
            registerForm.classList.remove('hidden');
            loginMessage.textContent = '';
            registerCodeInput.removeAttribute('readonly');
            registerCodeInput.value = '';
        });

        registerButton.addEventListener('click', async () => {
            const rawName = registerNameInput.value.trim();
            const turma = registerClassInput.value;
            const code = registerCodeInput.value.trim();
            const password = registerPasswordInput.value.trim();
            registerMessage.textContent = '';
            if (!rawName || !turma || !code || !password) {
                registerMessage.textContent = 'Todos os campos são obrigatórios.';
                return;
            }
            const name = capitalizeName(rawName);
            toggleButtonLoader(registerButton, true);
            const data = { name, turma, code, password };
            const result = await callAppsScript('register', data);
            toggleButtonLoader(registerButton, false);
            if (result.status === 'success') {
                handleSuccessfulLogin({ name: name, code: code, turma: turma });
            } else {
                registerMessage.textContent = result.message || 'Ocorreu um erro.';
            }
        });

        backToLoginButton.addEventListener('click', () => {
            registerForm.classList.add('hidden');
            loginForm.classList.remove('hidden');
            registerMessage.textContent = '';
        });

        // Event listeners for Enter key
        loginPasswordInput.addEventListener('keydown', (e) => { if(e.key === 'Enter') loginButton.click(); });
        loginCodeInput.addEventListener('keydown', (e) => { if(e.key === 'Enter') loginButton.click(); });
        registerPasswordInput.addEventListener('keydown', (e) => { if(e.key === 'Enter') registerButton.click(); });
        registerCodeInput.addEventListener('keydown', (e) => { if(e.key === 'Enter') registerButton.click(); });
        registerNameInput.addEventListener('keydown', (e) => { if(e.key === 'Enter') registerButton.click(); });

        window.addEventListener('load', () => {
            const user = sessionStorage.getItem('loggedInUser');
            if (user) {
                loggedInUser = JSON.parse(user);
                playerFirstNameEl.textContent = loggedInUser.firstName;
                showScreen(videoScreen);
            } else {
                showScreen(loginScreen);
            }
            updateScoreDisplay();
        });
        
        let player;
        let progressCheckInterval;
        let maxWatchedTime = 0;

        function updateScoreDisplay() {
            document.querySelectorAll('.score-display').forEach(el => el.textContent = score);
        }
        
        function updateLivesDisplay() {
            livesContainer.innerHTML = '';
            for (let i = 0; i < lives; i++) {
                livesContainer.innerHTML += '<span class="heart">❤️</span>';
            }
        }

        function onYouTubeIframeAPIReady() {
            player = new YT.Player('player', {
                height: '100%',
                width: '100%',
                videoId: 'Ss4gxKcJyoE',
                playerVars: { 'playsinline': 1, 'rel': 0, 'controls': 1 },
                events: { 'onReady': onPlayerReady, 'onStateChange': onPlayerStateChange }
            });
        }

        function onPlayerReady(event) {
            maxWatchedTime = 0;
        }

        function onPlayerStateChange(event) {
            if (event.data == YT.PlayerState.PLAYING) {
                clearInterval(progressCheckInterval); 
                progressCheckInterval = setInterval(() => {
                    const currentTime = player.getCurrentTime();
                    const duration = player.getDuration();
                    const isMuted = player.isMuted();
                    const playbackRate = player.getPlaybackRate();
                    const scoreTextEl = videoScreen.querySelector('.score-display').parentElement;

                    if (currentTime > maxWatchedTime + 1.5) {
                        player.seekTo(maxWatchedTime, true);
                    } else if (currentTime > maxWatchedTime) {
                        maxWatchedTime = currentTime;
                    }
                    
                    if (isMuted || playbackRate !== 1) {
                        score = 0;
                        scoreTextEl.classList.add('text-red-500');
                    } else {
                        scoreTextEl.classList.remove('text-red-500');
                        if (duration > 0) {
                            score = Math.floor((maxWatchedTime / duration) * 100);
                        }
                    }
                    updateScoreDisplay();

                    if ((maxWatchedTime / duration) >= 0.9) {
                        if (continueBtn.disabled) {
                            continueBtn.disabled = false;
                            continueBtn.classList.remove('opacity-50', 'cursor-not-allowed');
                        }
                    }
                }, 500);
            } else {
                clearInterval(progressCheckInterval);
            }
        }

        continueBtn.addEventListener('click', () => {
            if (!continueBtn.disabled) {
                showScreen(gameScreen);
                startGame();
            }
        });

        const adverbs = [
            { word: 'hoje', category: 'tempo' }, { word: 'amanhã', category: 'tempo' }, { word: 'sempre', category: 'tempo' }, { word: 'nunca', category: 'tempo' }, { word: 'cedo', category: 'tempo' },
            { word: 'aqui', category: 'lugar' }, { word: 'ali', category: 'lugar' }, { word: 'longe', category: 'lugar' }, { word: 'perto', category: 'lugar' }, { word: 'dentro', category: 'lugar' },
            { word: 'bem', category: 'modo' }, { word: 'mal', category: 'modo' }, { word: 'devagar', category: 'modo' }, { word: 'rapidamente', category: 'modo' }, { word: 'calmamente', category: 'modo' },
            { word: 'muito', category: 'intensidade' }, { word: 'pouco', category: 'intensidade' }, { word: 'bastante', category: 'intensidade' }, { word: 'demais', category: 'intensidade' }, { word: 'mais', category: 'intensidade' }
        ];

        const currentAdverbEl = document.getElementById('current-adverb');
        const dropZones = document.querySelectorAll('.drop-zone');
        const feedbackEl = document.getElementById('feedback');
        let currentAdverb = null;
        let availableAdverbs = [...adverbs];

        function showFeedback(message, isCorrect) {
            feedbackEl.textContent = message;
            feedbackEl.className = `fixed top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 p-6 sm:p-8 rounded-2xl text-white text-2xl sm:text-3xl font-bold shadow-2xl opacity-0 pointer-events-none w-11/12 max-w-sm text-center ${isCorrect ? 'bg-green-500' : 'bg-red-500'}`;
            feedbackEl.classList.remove('opacity-0');
            feedbackEl.style.transform = 'translate(-50%, -50%) scale(1)';
            setTimeout(() => {
                feedbackEl.style.transform = 'translate(-50%, -50%) scale(0.5)';
                feedbackEl.classList.add('opacity-0');
            }, 1000);
        }

        function nextAdverb() {
            if (availableAdverbs.length === 0) {
                availableAdverbs = [...adverbs];
            }
            const randomIndex = Math.floor(Math.random() * availableAdverbs.length);
            currentAdverb = availableAdverbs[randomIndex];
            availableAdverbs.splice(randomIndex, 1);
            currentAdverbEl.textContent = currentAdverb.word;
        }

        function startGame() {
            player.stopVideo();
            lives = 5;
            startTime = new Date();
            updateLivesDisplay();
            updateScoreDisplay();
            nextAdverb();
        }
        
        function getMotivationalMessage(finalScore) {
            if (finalScore >= 150) {
                return "Excelente, " + loggedInUser.firstName + "! Você é um mestre dos advérbios! 🏆";
            } else if (finalScore >= 100) {
                return "Muito bem, " + loggedInUser.firstName + "! Continue praticando para ficar ainda melhor. 👍";
            } else {
                return "Não desista, " + loggedInUser.firstName + "! Cada tentativa é um passo para aprender mais. ✨";
            }
        }
        
        async function endGame() {
            const endTime = new Date();
            const timeSpent = Math.round((endTime - startTime) / 1000);
            
            showScreen(endScreen);
            document.getElementById('final-score').textContent = score;
            document.getElementById('final-time').textContent = `${timeSpent}s`;
            finalMessageEl.textContent = getMotivationalMessage(score);
            
            const result = await callAppsScript('saveScoreAndGetRanking', { 
                fullName: loggedInUser.name, // Envia o nome completo
                turma: loggedInUser.turma, 
                score: score, 
                time: timeSpent,
                nomeDoJogo: NOME_DESTE_JOGO,
                code: loggedInUser.code // Envia o código único do jogador
            });
            
            if (result.status === 'success') {
                populateRankingTable(result.ranking);
            } else {
                document.getElementById('ranking-body').innerHTML = `<tr><td colspan="4" class="p-4 text-center text-red-500">${result.message}</td></tr>`;
            }
        }
        
        function populateRankingTable(ranking) {
            const tbody = document.getElementById('ranking-body');
            tbody.innerHTML = '';
            ranking.forEach((entry, index) => {
                const row = `
                    <tr class="border-b border-sky-100">
                        <td class="p-2 font-bold">${index + 1}</td>
                        <td class="p-2">${entry.name}</td>
                        <td class="p-2">${entry.score}</td>
                        <td class="p-2">${entry.time}s</td>
                    </tr>
                `;
                tbody.innerHTML += row;
            });
        }

        document.getElementById('play-again-button').addEventListener('click', () => {
            window.location.reload();
        });

        dropZones.forEach(zone => {
            zone.addEventListener('click', () => {
                if (!currentAdverb) return; // Impede cliques antes do jogo começar

                if (currentAdverb.category === zone.id) {
                    score += 10;
                    showFeedback('Correto! 🎉', true);
                    nextAdverb();
                } else {
                    lives--;
                    showFeedback('Ops, tente de novo! 🤔', false);
                    if (lives <= 0) {
                        endGame();
                        return;
                    }
                }
                updateScoreDisplay();
                updateLivesDisplay();
            });
        });

    </script>
</body>
</html>
